package Project2_6581204;

/**
 * Travel Management Simulation Project
 * @author Sukumarn Srimai 6581085
           Rueti Limpacharoenkul 6581166
           Chantapat Tivalai 6581193
           Thanarat Bunbangyang 6581195
           Banthawan Udomsap 6581204
 */
import java.io.*;
import java.util.*;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CountDownLatch;   //apply this library to help synchronize threads, except CyclicBarrier
import java.util.concurrent.CyclicBarrier;

public class Project2_6581204 {
    static int days;
    static int agencyCount, maxDailyArrival;
    static int tourCount, tourCapacity;
    static int placeCount;

    static List<AgencyThread> agencies = new ArrayList<>();
    static List<Tour> tours = new ArrayList<>();
    static List<OperatorThread> operators = new ArrayList<>();
    static List<Place> places = new ArrayList<>();
    
    static CountDownLatch agencyLatch;  
    static CyclicBarrier customerBarrier; 
    
    private static String formatThreadName(String threadName) {
        return String.format("%16s >> ", threadName);
    }

    public static void main(String[] args) {

        new Installment("config.txt");
        Check check = new Check(agencyCount);
        

        customerBarrier = new CyclicBarrier(agencyCount);
       
        for (int i = 0; i < placeCount; i++) {
            places.add(new Place("Place_" + i));
        }

        for (int i = 0; i < tourCount; i++) {
            tours.add(new Tour("Tour_" + i, tourCapacity));
        }

        for (int i = 0; i < tours.size(); i++) {
            OperatorThread operator = new OperatorThread(tours.get(i), i);
            operators.add(operator);
        }

        for (int i = 0; i < agencyCount; i++) {
            AgencyThread agency = new AgencyThread("AgencyThread_" + i);
            agency.checkSet(check);
            agencies.add(agency);
        }
        

        printParameters();


        for (OperatorThread op : operators) op.start();
        for (AgencyThread ag : agencies) ag.start();
        

        // Simulate days
        for (int day = 1; day <= days; day++) {
            agencyLatch = new CountDownLatch(agencyCount);
            customerBarrier = new CyclicBarrier(agencyCount);
            
            // Print day information
            printDayHeader(day);

            // Notify threads to start day's activities
            synchronized (Project2_6581204.class) {
                Project2_6581204.class.notifyAll();
            }

            try {
                // Wait for all agencies to finish customer assignment
                agencyLatch.await();
            } catch (InterruptedException e) {
            }

            // Notify operators to process customers
            for (OperatorThread op : operators) {
                synchronized (op) {
                    op.notify();
                }
            }

            // Brief pause between days
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
            }

            System.out.println(formatThreadName(Thread.currentThread().getName()) + " \n");
        }

        // Wait for all threads to complete
        waitForThreadCompletion();

        // Print final summary
        printSummary();
    }

    // Print simulation parameters
    private static void printParameters() {
        String threadName = Thread.currentThread().getName();
        String formattedThreadName = formatThreadName(threadName);
        System.out.println(formattedThreadName + "================= Parameters =====================");
        System.out.println(formattedThreadName + "Days of simulation  = " + days);
        System.out.println(formattedThreadName + "Max arrival         = " + maxDailyArrival);
        System.out.println(formattedThreadName + "AgencyThreads       = " + agencies);
        System.out.println(formattedThreadName + "Tour capacity       = " + tourCapacity);
        System.out.println(formattedThreadName + "OperatorThreads     = " + operators);
        System.out.println(formattedThreadName + "Places              = " + places);
        System.out.println(formattedThreadName + "\n");
    }

    // Print day header
    private static void printDayHeader(int day) {
        String threadName = Thread.currentThread().getName();
        String formattedThreadName = formatThreadName(threadName);
        System.out.println(formattedThreadName + "====================================================");
        System.out.println(formattedThreadName + "Day " + day);
        System.out.println(formattedThreadName );
    }

    // Wait for all threads to complete
    private static void waitForThreadCompletion() {
        for (AgencyThread ag : agencies) {
            try { 
                ag.join(); 
            } catch (InterruptedException e) {
            }
        }
        for (OperatorThread op : operators) {
            try { 
                op.join(); 
            } catch (InterruptedException e) {
            }
        }
    }

    // Configuration file handling class
    static class Installment {
        public Installment(String filename) {
            Scanner input = new Scanner(System.in);

            while (true) {
                filename = "src/main/java/Project2_6581204/" + filename;
                try (Scanner scanner = new Scanner(new File(filename))) {
                    break;
                } catch (Exception e) {
                    System.out.println(e + "\nNew file name =");
                    filename = input.nextLine();
                }
            }

            loadInstallmentData(filename);
        }
    }

    // Read configuration data
    public static void loadInstallmentData(String filename) {
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            days = Integer.parseInt(br.readLine().split(",")[1].trim());
            String[] agencyData = br.readLine().split(",");
            agencyCount = Integer.parseInt(agencyData[1].trim());
            maxDailyArrival = Integer.parseInt(agencyData[2].trim());

            String[] tourData = br.readLine().split(",");
            tourCount = Integer.parseInt(tourData[1].trim());
            tourCapacity = Integer.parseInt(tourData[2].trim());

            placeCount = Integer.parseInt(br.readLine().split(",")[1].trim());
        } catch (IOException e) {
            System.out.println("Error: Missing config.txt file.");
            System.exit(1);
        }
    }

    // Print summary of tours
    public static void printSummary() {
        String threadName = Thread.currentThread().getName();
        String formattedThreadName = formatThreadName(threadName);
        System.out.println(formattedThreadName + "====================================================");
        System.out.println(formattedThreadName + "Summary");

        // Sort tours by total customers in descending order
        tours.sort((a, b) -> {
            int customerComparison = Integer.compare(b.totalCustomers, a.totalCustomers);
            return customerComparison != 0 ? customerComparison : a.name.compareTo(b.name);
        });

        for (Tour tour : tours) {
            System.out.printf(formattedThreadName + "%s       total customers = %d%n", tour.name, tour.totalCustomers);
        }
    }
}

// Agency Thread represents individual travel agencies
class AgencyThread extends Thread {
    Random rand = new Random();
    int remainingCustomers = 0;
    Check check;

    public AgencyThread(String name) {
        super(name);
    }
    
    public void checkSet(Check check){
        this.check = check;
    }
    
    @Override
    public String toString() {
        return getName();
    }

    public void run() {
        for (int day = 1; day <= Project2_6581204.days; day++) {
            // Wait for day to start
            synchronized (Project2_6581204.class) {
                try {
                    Project2_6581204.class.wait();
                } catch (InterruptedException e) {}
            }

            int newCustomers = rand.nextInt(Project2_6581204.maxDailyArrival + 1);
            remainingCustomers += newCustomers;

            System.out.printf("%16s >> new arrival = %d   \t\t\tremaining customers = %d%n", 
                              getName(), newCustomers, remainingCustomers);
            

            try {
                Project2_6581204.customerBarrier.await();
            } catch (InterruptedException | BrokenBarrierException e) {}


            while (remainingCustomers > 0) {
                Tour randomTour = Project2_6581204.tours.get(rand.nextInt(Project2_6581204.tours.size()));
                int assigned = randomTour.addCustomers(remainingCustomers);
                remainingCustomers -= assigned;


                if (assigned > 0) {
                    System.out.printf("%16s >> send %d customers to %s\t\tseats taken = %d%n", 
                                      getName(), assigned, randomTour.name, randomTour.getCurrentSeats());
                }
            }
            
            if(check.checkComplete() == check.getAgencyCount()){
                System.out.printf("%16s >> \n", getName());
                check.reset();
            }

            Project2_6581204.agencyLatch.countDown();
        }
    }
}


class Tour {
    String name;
    int capacity;
    int currentCustomers = 0;
    int totalCustomers = 0;

    public Tour(String name, int capacity) {
        this.name = name;
        this.capacity = capacity;
    }


    public synchronized int addCustomers(int num) {
        int availableSeats = capacity - currentCustomers;
        int toAssign = Math.min(availableSeats, num);
        currentCustomers += toAssign;
        totalCustomers += toAssign;
        return toAssign;
    }


    public synchronized void resetDailyCount() {
        currentCustomers = 0;
    }
    

    public synchronized int getCurrentSeats() {
        return currentCustomers;
    }
}


class OperatorThread extends Thread {
    Tour tour;
    Random rand = new Random();

    public OperatorThread(Tour tour, int index) {  
        super("OperatorThread_" + index);
        this.tour = tour;
    }
    
    @Override
    public String toString() {
        return getName();
    }

    public void run() {
        for (int day = 1; day <= Project2_6581204.days; day++) {

            synchronized (this) {
                try {
                    wait();
                } catch (InterruptedException e) {}
            }


            if (tour.currentCustomers == 0) {
                System.out.printf("%16s >> no customer%n", getName());
            } else {

                Place randomPlace = Project2_6581204.places.get(rand.nextInt(Project2_6581204.places.size()));
                

                randomPlace.addVisitors(tour.currentCustomers);
                

                System.out.printf("%16s >> take %d customers to %s   \t\tvisitor count = %d%n", 
                                  getName(), tour.currentCustomers, randomPlace.name, randomPlace.visitorCount);
                

                tour.resetDailyCount();
            }
        }
    }
}


class Place {
    String name;
    int visitorCount = 0;

    public Place(String name) {
        this.name = name;
    }
    
    @Override
    public String toString() {
        return name;
    }


    public synchronized void addVisitors(int num) {
        visitorCount += num;
    }
}


class Check{
    private int completed;
    private int agencyCount;
    
    public Check(int agencyCount){this.agencyCount = agencyCount;}
    
    public int getAgencyCount(){return agencyCount;}
    
    public int checkComplete(){
        ++completed;
        return completed;
    }
    
    public void reset(){
        completed = 0;
    }
            
}
