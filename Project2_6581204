/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package Project2_6581204;

/**
 *
 * @author Sukumarn Srimai 6581085
           Rueti Limpacharoenkul 6581166
           Chantapat Tivalai 6581193
           Thanarat Bunbangyang 6581195
           Banthawan Udomsap 6581204
 */
import java.io.*;
import java.util.*;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;

class Project2_6581204 {
    static int days;
    static int agencyCount, maxDailyArrival;
    static int tourCount, tourCapacity;
    static int placeCount;

    static List<AgencyThread> agencies = new ArrayList<>();
    static List<Tour> tours = new ArrayList<>();
    static List<OperatorThread> operators = new ArrayList<>();
    static List<Place> places = new ArrayList<>();
    
    static CountDownLatch agencyLatch;  // ✅ Latch to sync agencies and operators
    static CyclicBarrier customerBarrier; 

    public static void main(String[] args) {
        Installment installment = new Installment("config_1.txt");
        
        customerBarrier = new CyclicBarrier(agencyCount);
       
        // Create Places
        for (int i = 0; i < placeCount; i++) {
            places.add(new Place("Place_" + (i)));
        }

        // Create Tours
        for (int i = 0; i < tourCount; i++) {
            tours.add(new Tour("Tour_" + (i), tourCapacity));
        }

        // Create Operators
        for (int i = 0; i < tours.size(); i++) {
            OperatorThread operator = new OperatorThread(tours.get(i), i);
            operators.add(operator);
        }


        // Create Agencies
        for (int i = 0; i < agencyCount; i++) {
            AgencyThread agency = new AgencyThread("AgencyThread_" + (i));
            agencies.add(agency);
        }
        
         // Print parameters
        System.out.println("\t    main >> ================= Parameters =====================");
        System.out.println("\t    main >> Days of simulation       = " + days);
        System.out.println("\t    main >> Max arrival              = " + maxDailyArrival);
        System.out.println("\t    main >> AgencyThreads            = " + agencies);
        System.out.println("\t    main >> Tour capacity            = " + tourCapacity);
        System.out.println("\t    main >> OperatorThreads          = " + operators);
        System.out.println("\t    main >> Places                   = " + places);
        System.out.println("\t    main >> \n");

        for (OperatorThread op : operators) op.start();
        for (AgencyThread ag : agencies) ag.start();

        for (int day = 1; day <= days; day++) {
            agencyLatch = new CountDownLatch(agencyCount);  // ✅ Reset latch for each day
            customerBarrier = new CyclicBarrier(agencyCount);
            System.out.println("\t    main >> ====================================================");
            System.out.println("\t    main >> Day " + day);
            System.out.println("\t    main >>");

            synchronized (Project2_6581204.class) {
                Project2_6581204.class.notifyAll();  // Start the day's activities
            }

            try {
                agencyLatch.await();  // ✅ Wait for all agencies to finish assigning customers
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            for (OperatorThread op : operators) {
                synchronized (op) {
                    op.notify();  // ✅ Notify operators to process their customers
                }
            }

            try {
                Thread.sleep(1000);  // Let threads process before the next day
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            System.out.println("\t    main >>");
        }

        for (AgencyThread ag : agencies) {
            try { ag.join(); } catch (InterruptedException e) {}
        }
        for (OperatorThread op : operators) {
            try { op.join(); } catch (InterruptedException e) {}
        }

        printSummary();
    }

    static class Installment {
        public Installment(String filename) {
            try (Scanner scanner = new Scanner(new File("src/main/java/Project2_6581204/" + filename))) {
                loadInstallmentData("src/main/java/Project2_6581204/" + filename);
            } catch (Exception e) {
                System.out.println(e + "\nNew file name =");
                Scanner input = new Scanner(System.in);
                loadInstallmentData(input.nextLine());
            }
        }
    }

    public static void loadInstallmentData(String filename) {
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            days = Integer.parseInt(br.readLine().split(",")[1].trim());
            String[] agencyData = br.readLine().split(",");
            agencyCount = Integer.parseInt(agencyData[1].trim());
            maxDailyArrival = Integer.parseInt(agencyData[2].trim());

            String[] tourData = br.readLine().split(",");
            tourCount = Integer.parseInt(tourData[1].trim());
            tourCapacity = Integer.parseInt(tourData[2].trim());

            placeCount = Integer.parseInt(br.readLine().split(",")[1].trim());
        } catch (IOException e) {
            System.out.println("Error: Missing config_1.txt file.");
            System.exit(1);
        }
    }

    public static void printSummary() {
        System.out.println("\n\t    main >> ====================================================");
        System.out.println("\t    main >> Summary");

        tours.sort((a, b) -> Integer.compare(b.totalCustomers, a.totalCustomers));

        for (Tour tour : tours) {
            System.out.printf("\t    main >> %s       total customers = %d%n", tour.name, tour.totalCustomers);
        }
    }
}

class AgencyThread extends Thread {
    Random rand = new Random();

    public AgencyThread(String name) {
        super(name);
    }
    
    @Override
    public String toString() {
        return getName();
    }

    public void run() {
        for (int day = 1; day <= Project2_6581204.days; day++) {
            synchronized (Project2_6581204.class) {
                try {
                    Project2_6581204.class.wait();  // Wait for the day to start
                } catch (InterruptedException e) {}
            }

            int arrivingCustomers = rand.nextInt(Project2_6581204.maxDailyArrival + 1);
            System.out.printf("%-2s >> new arrival = %d   \t\t\tremaining customers = %d%n", 
                              getName(), arrivingCustomers, arrivingCustomers);
            
             try {
                Project2_6581204.customerBarrier.await();  // ✅ Ensures all agencies reach this point before moving on
            } catch (InterruptedException | BrokenBarrierException e) {}

            while (arrivingCustomers > 0) {
                Tour randomTour = Project2_6581204.tours.get(rand.nextInt(Project2_6581204.tours.size()));
                int assigned = randomTour.addCustomers(arrivingCustomers);
                arrivingCustomers -= assigned;

                if (assigned > 0) {
                    System.out.printf("%-2s >> send %d customers to %s\t\tseats taken = %d%n", 
                                      getName(), assigned, randomTour.name, randomTour.getCurrentSeats());
                }
            }

            Project2_6581204.agencyLatch.countDown();  // ✅ Mark this agency as finished
        }
    }
}

class Tour {
    String name;
    int capacity;
    int currentCustomers = 0;
    int totalCustomers = 0;

    public Tour(String name, int capacity) {
        this.name = name;
        this.capacity = capacity;
    }

    public synchronized int addCustomers(int num) {
        int availableSeats = capacity - currentCustomers;
        int toAssign = Math.min(availableSeats, num);
        currentCustomers += toAssign;
        totalCustomers += toAssign;
        return toAssign;
    }

    public synchronized void resetDailyCount() {
        currentCustomers = 0;
    }
    
    public synchronized int getCurrentSeats() {
        return currentCustomers;
    }
}

class OperatorThread extends Thread {
    Tour tour;
    Random rand = new Random();

    public OperatorThread(Tour tour, int index) {  
        super("OperatorThread_" + index);
        this.tour = tour;
    }
    
    @Override
    public String toString() {
        return getName();
    }

    public void run() {
        for (int day = 1; day <= Project2_6581204.days; day++) {
            synchronized (this) {
                try {
                    wait();  // ✅ Wait for agencies to finish before taking action
                } catch (InterruptedException e) {}
            }

            if (tour.currentCustomers == 0) {
                System.out.printf("%s >> no customer%n", getName());
            } else {
                Place randomPlace = Project2_6581204.places.get(rand.nextInt(Project2_6581204.places.size()));
                randomPlace.addVisitors(tour.currentCustomers);
                System.out.printf("%s >> take %d customers to %s   \t\tvisitor count = %d%n", 
                                  getName(), tour.currentCustomers, randomPlace.name, randomPlace.visitorCount);
                tour.resetDailyCount();
            }
        }
    }
}

class Place {
    String name;
    int visitorCount = 0;

    public Place(String name) {
        this.name = name;
    }
    
    @Override
    public String toString() {
        return name;
    }

    public synchronized void addVisitors(int num) {
        visitorCount += num;
    }
}
